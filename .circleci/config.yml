# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

executors:
  cl2-back:
    parameters:
      image-tag:
        type: string
    docker:
      - image: citizenlabdotco/cl2-back:<< parameters.image-tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
      - image: 'camptocamp/postgres:9.6'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
jobs:

  build-docker-image:
    docker:
      - image: docker:stable-git
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run: |
          docker build -t citizenlabdotco/cl2-back:$CIRCLE_SHA1 .
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push citizenlabdotco/cl2-back:$CIRCLE_SHA1

  test:
    resource_class: small
    executor: 
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 4
    environment:
      RAILS_ENV: test
    steps:
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports

  web-api-docs:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
    steps:
      - run: |
          rake db:create
          rake db:schema:load
      - run: bundle exec rake web_api:docs:generate
      - run: bundle exec rake public_api:docs:generate
      - run: bundle exec rake admin_api:docs:generate
      - run: apt-get -y install awscli
      - run: aws s3 sync doc/api s3://developers.citizenlab.co/api-docs/frontweb_api/$CIRCLE_BRANCH --delete --acl public-read
      - run: aws s3 sync doc/public_api s3://developers.citizenlab.co/api-docs/public_api/$CIRCLE_BRANCH --delete --acl public-read
      - run: aws s3 sync doc/admin_api s3://developers.citizenlab.co/api-docs/admin_api/$CIRCLE_BRANCH --delete --acl public-read

  deploy-cl-docs-portal:
    resource_class: small
    docker:
      - image: byrnedo/alpine-curl
    steps:
      - run: "curl -u $CIRCLE_API_TOKEN: -d build_parameters[CIRCLE_JOB]=build https://circleci.com/api/v1.1/project/github/CitizenLabDotCo/cl-docs-portal/tree/master"

  deploy-to-swarm:
    resource_class: small
    docker:
      - image: buildo/alpine-ssh
    parameters:
      ssh_host:
        type: string
      ssh_user:
        type: string
        default: ubuntu
      stack_name:
        type: string
        default: cl2-back
      compose_file:
        type: string
        default: docker-compose-production.yml
    steps:
      - deploy:
          command: ssh << parameters.ssh_user >>@<< parameters.ssh_host >> "docker pull citizenlabdotco/cl2-back:$CIRCLE_BRANCH && cd cl2-deployment && docker stack deploy --compose-file << parameters.compose_file >> << parameters.stack_name >> --with-registry-auth"


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-docker-image:
          context: docker-hub-access
          filters:
            branches:
              ignore:
                - crowdin_master
      - test:
          context: docker-hub-access
          requires:
            - build-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
      - web-api-docs:
          context: docker-hub-access
          requires:
            - test
          filters:
            branches:
              ignore:
                - crowdin_master
      - deploy-cl-docs-portal:
          context: docker-hub-access
          requires:
            - web-api-docs
      - deploy-to-swarm:
          requires:
            - test
          filters:
            branches:
              only:
                - master
          ssh_host: "52.29.30.188"
          compose_file: docker-compose-staging.yml
          stack_name: cl2-back-stg
      - deploy-to-swarm:
          requires:
            - test
          filters:
            branches:
              only:
                - production
          ssh_host: "52.57.74.84"
          compose_file: docker-compose-production-benelux.yml
          stack_name: cl2-prd-bnlx-stack
      - deploy-to-swarm:
          requires:
            - test
          filters:
            branches:
              only:
                - production
          ssh_host: "35.183.23.116"
          compose_file: docker-compose-production-canada.yml
