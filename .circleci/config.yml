# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  cypress: cypress-io/cypress@1.2.0
jobs:
  test:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          name: Run tests with JUnit as reporter
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
          command: npm run test:ci
      - store_test_results:
          path: ./reports/junit
      - store_artifacts:
          path: ./reports/junit

  lint:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run lint:ts --silent

  extract_intl:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run: npm run extract-intl
      - run: git add app/translations/*.json
      - run: git config --global user.email "hello@citizenlab.co"
      - run: git config --global user.name "CircleCI"
      - add_ssh_keys:
          fingerprints:
            - "54:03:ca:0f:4e:7a:fc:fa:6e:30:ef:80:2e:da:02:c4"
      - run: git diff --quiet && git diff --staged --quiet || git commit -m "Translations updated by CI (extract-intl)"
      - run: git push origin $CIRCLE_BRANCH

  deploy_demo:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING npm run build:staging
          no_output_timeout: '30m'
      - deploy:
          name: Deploy to S3 if tests pass and branch is Master
          command: aws s3 sync build/ s3://cl2-front-staging/ --delete --acl public-read

  deploy_crowdin:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: CROWDIN_PLUGIN_ENABLED=true SEGMENT_API_KEY=$SEGMENT_API_KEY_STAGING npm run build:staging
          no_output_timeout: '30m'
      - deploy :
          name: Deploy translatable version to i18n.stg.citizenlab.co
          command: aws s3 sync build/ s3://cl2-front-translations/ --delete --acl public-read

  deploy_production:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    working_directory: ~/cl2-front
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-npm-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-npm-cache-
      - run: npm ci
      - save_cache:
          paths:
            - /root/.npm
          key: v1-npm-cache-{{ checksum "package.json" }}
      - run:
          command: SEGMENT_API_KEY=$SEGMENT_API_KEY_PRODUCTION npm run build
          no_output_timeout: '30m'
      - deploy :
          name: Deploy production version to benelux cluster
          command: aws s3 sync build/ s3://cl2-front-production-benelux/ --delete --acl public-read
      - deploy:
          name: Invalidate the static assets on the CDN
          command: aws cloudfront create-invalidation --distribution-id E2MY732QC516J3 --paths '/*'

  reset_e2e_tenant:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
    steps:
      - add_ssh_keys:
          fingerprints:
            - "50:78:bd:26:fb:8c:2d:96:38:ac:57:d2:08:46:96:da"
      - run: ssh -o StrictHostKeyChecking=no -l ubuntu 35.157.143.6 "docker run --env-file cl2-deployment/.env-staging --rm citizenlabdotco/cl2-back:latest bundle exec rake cl2_back:create_tenant['e2e.stg.citizenlab.co','e2etests_template']"

  test_a11y:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
        user: pptruser
    working_directory: ~/cl2-front
    steps:
      - checkout
      - run: npm install pa11y-ci
      - run:
          command: npm run test:pa11y --silent
          environment:
            NODE_ENV: staging

  test_lighthouse:
    docker:
      - image: citizenlabdotco/cl2-devops-front-buildenv
        user: pptruser
    working_directory: ~/cl2-front
    steps:
      - checkout
      - run:
          command: npm install lighthouse-ci
      - run:
          command: npx lighthouse-ci https://demo.stg.citizenlab.co --performance=3 --report=/tmp
      - store_artifacts:
          path: /tmp/report.html
          destination: lighthouse

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - crowdin_master
                - master
                - production
      - lint:
          filters:
            branches:
              ignore:
                - crowdin_master
                - master
                - production
      - extract_intl:
          filters:
            branches:
              ignore:
                - crowdin_master
                - master
                - production
      - deploy_demo:
          filters:
            branches:
              only: 
                - master
                - fix/CL2-2906-fix-failing-e2e-tests-in-CI
      - deploy_crowdin:
          filters:
            branches:
              only: master
      - reset_e2e_tenant:
          filters:
            branches:
              only: 
                - master
                - fix/CL2-2906-fix-failing-e2e-tests-in-CI
      - cypress/run:
          requires:
            - deploy_demo
            - reset_e2e_tenant
          executor: cypress/browsers-chrome69
          browser: chrome
          command: npx cypress run --spec 'cypress/integration/sign_up_step_2_page.ts' --config baseUrl=https://e2e.stg.citizenlab.co
          filters:
            branches:
              only: 
                - master
                - fix/CL2-2906-fix-failing-e2e-tests-in-CI
      - test_a11y:
          requires:
            - deploy_demo
          filters:
            branches:
              only: master
      - test_lighthouse:
          requires:
            - deploy_demo
          filters:
            branches:
              only: master
      - deploy_production:
          filters:
            branches:
              only: production
