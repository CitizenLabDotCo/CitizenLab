# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.11

executors:
  cl2-back:
    parameters:
      image-tag:
        type: string
    docker:
      - image: citizenlabdotco/cl2-back:<< parameters.image-tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
      - image: 'camptocamp/postgres:9.6'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
jobs:

  build-docker-image:
    docker:
      - image: docker:stable-git
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run: |
          docker build -t citizenlabdotco/cl2-back:$CIRCLE_SHA1 .
      - run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push citizenlabdotco/cl2-back:$CIRCLE_SHA1

  test:
    resource_class: small
    executor: 
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    parallelism: 4
    environment:
      RAILS_ENV: test
    steps:
      - run: |
          rake db:create
          rake db:schema:load
      - run: |
          TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" "engines/*/spec/**/*_spec.rb" | circleci tests split  --split-by=timings)
          echo $TESTFILES
          bundle exec rspec --format documentation --format RspecJunitFormatter -o spec/reports/rspec.xml -- ${TESTFILES}
      - store_test_results:
          path: spec/reports

  web-api-docs:
    resource_class: small
    executor:
      name: cl2-back
      image-tag: $CIRCLE_SHA1
    working_directory: /cl2_back
    environment:
      RAILS_ENV: test
    steps:
      - when:
          condition: $CIRCLE_PULL_REQUEST
          steps:
            - run: |
                rake db:create
                rake db:schema:load
            - run: bundle exec rake web_api:docs:generate
            - run: bundle exec rake public_api:docs:generate
            - run: bundle exec rake admin_api:docs:generate
            - run: apt-get -y install unzip # Needed for aws-cli installation
            - aws-s3/sync:
                from: doc/api
                to: s3://developers.citizenlab.co/api-docs/frontweb_api/$CIRCLE_BRANCH
                arguments: '--acl public-read'
                overwrite: true
            - aws-s3/sync:
                from: doc/public_api
                to: s3://developers.citizenlab.co/api-docs/public_api/$CIRCLE_BRANCH
                arguments: '--acl public-read'
                overwrite: true
            - aws-s3/sync:
                from: doc/admin_api
                to: s3://developers.citizenlab.co/api-docs/admin_api/$CIRCLE_BRANCH
                arguments: '--acl public-read'
                overwrite: true
      # - deploy: aws s3 sync doc/api s3://developers.citizenlab.co/api-docs/frontweb_api/${env.BRANCH_NAME} --delete --acl public-read

  # deploy_staging:
  #   machine: true
  #   steps:
  #     - run: |
  #         SSHU_VAR=SSH_STG_USER
  #         SSHH_VAR=SSH_STG_HOST
  #         ssh ${!SSHU_VAR}@${!SSHH_VAR} "docker pull citizenlabdotco/cl2-emails:latest && cd cl2-deployment && docker stack deploy --compose-file docker-compose-staging.yml cl2-back-stg --with-registry-auth"


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-docker-image:
          context: docker-hub-access
          filters:
            branches:
              ignore:
                - crowdin_master
      # - test:
      #     context: docker-hub-access
      #     requires:
      #       - build-docker-image
      #     filters:
      #       branches:
      #         ignore:
      #           - crowdin_master
      - web-api-docs:
          context: docker-hub-access
          requires:
            - build-docker-image
          filters:
            branches:
              ignore:
                - crowdin_master
      # - deploy_staging:
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - production


