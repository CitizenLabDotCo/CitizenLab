{
  "description": "Schema for validating the settings on a tenant",
  "type": "object",
  "required": ["core"],
  "additionalProperties": false,
  "properties":
    {
      "core": {
        "type": "object",
        "description": "The core of the system. Container for general settings. Always enabled",
        "required-settings": ["organization_type", "timezone", "currency", "locales", "color_main", "color_secondary","color_text", "lifecycle_stage"],
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true},
          "organization_type": {
            "description": "For a city: <40k small, >40k medium, >120k large. Otherwise: generic",
            "type": "string",
            "enum": ["small_city", "medium_city", "large_city", "generic", "demo"],
            "default": "medium_city"
          },
          "lifecycle_stage": {
            "description": "The lifecycle stage the customer is currently at",
            "type": "string",
            "enum": ["trial", "expired_trial", "demo", "active", "churned", "not_applicable"],
            "default": "demo"
          },
          "timezone": {
            "type": "string",
            "default": "Brussels",
            "enum": [<%= ActiveSupport::TimeZone.all.sort_by{|tz| TimezoneService.new.display_timezone(tz)}.map(&:name).map{|l| "\"#{l}\""}.join(",") %>],
            "enumNames": [<%= ActiveSupport::TimeZone.all.map{|tz| TimezoneService.new.display_timezone(tz)}.sort.map{|l| "\"#{l}\""}.join(",") %>]
          },
          "currency": {
            "type": "string",
            "default": "EUR",
            "enum": [<%= CL2_SUPPORTED_CURRENCIES.map{|l| "\"#{l}\""}.join(",") %>]
          },
          "total_population": {
            "description": "The population number of city/municipality's inhabitants",
            "type": "integer",
            "minimum": 0
          },
          "locales": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [<%= CL2_SUPPORTED_LOCALES.map{|l| "\"#{l}\""}.join(",") %>]
            },
            "uniqueItems": true,
            "minItems": 1,
            "default": "en"
          },
          "organization_name": {
            "description": "The name of the city or organization, used throughout the platform",
            "$ref": "#/definitions/multiloc_string"
          },
          "organization_site": {
            "description": "The URL to the website of the orginization",
            "type": "string",
            "pattern": "^$|^((http:\/\/.+)|(https:\/\/.+))"
          },
          "header_title": {
            "description": "The main title shown on the homepage (max 45 characters)",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              <%= CL2_SUPPORTED_LOCALES.map{|l| "\"#{l.to_s}\": {\"type\": \"string\", \"maxLength\": 45}" }.join(",") %>
            }
          },
          "header_slogan": {
            "description": "The subtitle shown on the homepage (max 90 characters)",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              <%= CL2_SUPPORTED_LOCALES.map{|l| "\"#{l.to_s}\": {\"type\": \"string\", \"maxLength\": 90}" }.join(",") %>
            }
          },
          "meta_title": {
            "description": "The title of the homepage, shown on the browser tab and in search engine results",
            "$ref": "#/definitions/multiloc_string"
          },
          "meta_description": {
            "description": "The description of the platform shown on links on social media",
            "$ref": "#/definitions/multiloc_string"
          },
          "color_main": {
            "description": "The main brand color as a hexadecimal value including the anchor character",
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "default": "#163A7D"
          },
          "color_secondary": {
            "description": "The secondary brand color as a hexadecimal value including the anchor character",
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "default": "#CF4040"
          },
          "color_text": {
            "description": "The text brand color as a hexadecimal value including the anchor character",
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "default": "#163A7D"
          },
          "signup_helper_text": {
            "description": "An optional short text, shown on top of the sign up form. Keep it short. Supports HTML",
            "$ref": "#/definitions/multiloc_string"
          },
          "custom_onboarding_message": {
            "description": "Optional text that is shown with buttons for a user that's signed in",
            "$ref": "#/definitions/multiloc_string",
            "private": true
          },
          "custom_onboarding_button": {
            "description": "Text on the CTA button next to the custom onboarding message",
            "$ref": "#/definitions/multiloc_string",
            "private": true
          },
          "custom_onboarding_link": {
            "description": "The location the CTA button links to. Should be a relative link (start with /)",
            "type": "string",
            "pattern": "^$|^/.*$",
            "private": true
          },
          "custom_onboarding_fallback_message": {
            "description": "Optional text that is shown when there's nothing to report for a user that's signed in",
            "$ref": "#/definitions/multiloc_string"
          },
          "currently_working_on_text": {
            "description": "Text shown on top of the project cards, leave empty for default",
            "$ref": "#/definitions/multiloc_string"
          },
          "segment_destinations_blacklist": {
            "description": "An optional list of segment destinations to disable",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["Google Analytics", "Google Tag Manager", "Facebook Pixel", "AdWords"]
            }
          },
          "areas_term": {
            "description": "How should the areas be called on this platform? (e.g. neighbourhoods, quarters, counties, ...). Fully lowercase",
            "$ref": "#/definitions/multiloc_string"
          },
          "area_term": {
            "description": "How should one area be called on this platform? Singular version of `areas_term`. Fully lowercase.",
            "$ref": "#/definitions/multiloc_string"
          }
        }
      },

      "pages": {
        "type": "object",
        "description":	"Allow custom pages to be made, and potentially be added to the navigation",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "password_login": {
        "type": "object",
        "description":  "Allow signing in with normal email/password",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["phone"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true},
          "phone": {
            "description": "Optionally allows users to register using a phone number if they have no email address. Currently a hack and not advised.",
            "type": "boolean",
            "default": false
          },
          "phone_email_pattern": {
            "description": "How to store the phone number in the email (e.g. `phone+__PHONE__@test.com` stores phone number as `phone+32478637483@test.com`)",
            "type": "string",
            "format": "email",
            "pattern": "^.*__PHONE__.*@.*$",
            "private": true
          }
        }
      },

      "facebook_login": {
        "type": "object",
        "description":	"Allow signing in and registering through a facebook account",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["app_id"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "app_id": {
            "type": "string"
          },
          "app_secret": {
            "type": "string",
            "private": true
          }
        }
      },

      "google_login": {
        "type": "object",
        "description":  "Allow signing in and registering through a google account",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["client_id", "client_secret"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string",
            "private": true
          }
        }
      },

      "azure_ad_login": {
        "type": "object",
        "description":  "Allow signing in and registering with Azure Active Directory (used for e.g. VUB)",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["tenant", "client_id", "logo_url", "login_mechanism_name"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "tenant": {
            "type": "string",
            "private": true
          },
          "client_id": {
            "description": "Sometimes also called 'application_id'",
            "type": "string",
            "private": true
          },
          "logo_url": {
            "type": "string",
            "pattern": "^https:\/\/.+",
            "description": "The full url to a logo image, that will be shown on the authentication button. Should be approximately 25px in height."
          },
          "login_mechanism_name": {
            "type": "string",
            "description": "The name of the login mechanism. Will be used in copy like 'Sign up with {login_mechanism_name}'"
          }
        }
      },

      "franceconnect_login": {
        "type": "object",
        "description":  "Allow signing in and registering through a FranceConnect account.",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["environment", "identifier", "secret"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "environment": {
            "type": "string",
            "description": "Are we live on the production FranceConnect environment, or still testing on their integration environment?",
            "enum": ["production", "integration"],
            "default": "production",
            "private": true
          },
          "identifier": {
            "type": "string",
            "private": true
          },
          "secret": {
            "type": "string",
            "private": true
          }
        }
      },

      /* "twitter_login": {
        "type": "object",
        "description":  "Allow signing in and registering through a twitter account",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["client_id", "client_secret"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "api_key": {
            "type": "string"
          },
          "api_secret": {
            "type": "string",
            "private": true
          }
        }
      }, */

      "integration_onze_stad_app": {
        "type": "object",
        "description":  "Allow posting ideas to Onze StadApp as news.",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "required-settings": ["app_id", "api_key"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "app_id": {
            "type": "string",
            "private": true
          },
          "api_key": {
            "type": "string",
            "private": true
          }
        }
      },

      "projects": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "ideas_overview": {
        "type": "object",
        "description":  "Show a menu item for the ideas overview page in the navigation bar (mobile & desktop)",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": false}
        }
      },

      "projects_phases": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "projects_pages": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "projects_events": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "projects_info": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },

      "excel_export": {
        "type": "object",
        "description":	"",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "groups": {
        "type": "object",
        "description":  "Assemble users in groups",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "private_projects": {
        "type": "object",
        "description":  "Make projects visible to certain groups only",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "surveys": {
        "type": "object",
        "description":  "Allow the embedding of surveys from Typeform, Survey Monkey and Google Forms",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "typeform_surveys": {
        "type": "object",
        "description":  "Allow the embedding of surveys from Typeform",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true},
          "user_token": {
            "description": "The user token that can be generated from your typeform profile. Survey results will only be downloadable for this typeform profile",
            "type": "string",
            "private": true,
            "default": "<%= ENV.fetch('DEFAULT_TYPEFORM_USER_TOKEN', '') %>"
          }
        }
      },
      "google_forms_surveys": {
        "type": "object",
        "description":  "Allow the embedding of Google Form surveys",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "surveymonkey_surveys": {
        "type": "object",
        "description":  "Allow the embedding of Surveymonkey surveys. Deprecated, since not supported on mobile",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false}
        }
      },
      "maps": {
        "type": "object",
        "description":  "Show maps throughout the platform",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true},
          "tile_provider": {
            "description": "The OSM compatible tile provider URL pattern. Https is required.",
            "type": "string",
            "pattern": "^https:\/\/.+",
            "default": "https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=DIZiuhfkZEQ5EgsaTk6D"
          },
          "map_center": {
            "description": "The default center point of the map. Use a dot as decimal separator.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "lat": {
                "type": "string",
                "default": "50.8503"
              },
              "long": {
                "type": "string",
                "default": "4.3517"
              }
            }
          },
          "zoom_level": {
            "type": "number",
            "description": "The default zoom level of the map. A number from 0 to 19. See https://wiki.openstreetmap.org/wiki/Zoom_levels",
            "default": 12
          },
          "osm_relation_id": {
            "type": "integer",
            "description": "The relation identifier that encloses the region of the tenant. You can find this through https://www.openstreetmap.org. Search for the place, click on the correct result and you'll find the relation id if the result is a relation (e.g. \"Relation: Knokke-Heist (4569)\"). If the no correct relation is present amongst the results (e.g. Scheveningen), search for the smallest enclosing region (e.g. The Hague)"
          }
        }
      },
      "user_custom_fields": {
        "type": "object",
        "description":  "Allows admin to define their own form fields that users can fill out at sign up",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "idea_custom_fields": {
        "type": "object",
        "description":  "Allows admins and moderators to customize the form fields for ideas, per project",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "clustering": {
        "type": "object",
        "description":  "Allows admins to analyze ideas by creating clustered visualizations",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false}
        }
      },
      "widgets": {
        "type": "object",
        "description":  "Allows admins to generate platform content widgets, embeddable on external websites",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "admin_project_templates": {
        "type": "object",
        "description":  "Create a project based on a template",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "ideaflow_social_sharing": {
        "type": "object",
        "description":  "A social sharing option is presented after posting an idea",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "initiativeflow_social_sharing": {
        "type": "object",
        "description":  "A social sharing option is presented after posting an initiative",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "granular_permissions": {
        "type": "object",
        "description":  "Choose which users are permitted to take which actions (e.g. posting, voting) in which projects/phases",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "participatory_budgeting": {
        "type": "object",
        "description":  "Participation methods where citizens can spend a limited budget on ideas that have a cost",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "manual_emailing": {
        "type": "object",
        "description":  "Allows admins and moderators to send out direct email to groups of citizens",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "automated_emailing_control": {
        "type": "object",
        "description":  "Allows admins to control which automated e-mail campaigns are active",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "machine_translations": {
        "type": "object",
        "description":  "Allows users to see translated content.",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "similar_ideas": {
        "type": "object",
        "description":  "Show links to similar ideas on the idea page. PoC, not yet stable.",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "geographic_dashboard": {
        "type": "object",
        "description":  "Shows a map with automatically detected idea locations. PoC, not yet stable.",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false}
        }
      },
      "initiatives": {
        "type": "object",
        "description":  "Initiatives are citizen-originating proposals that need to reach a number of votes in a limited time for the organization to take action",
        "additionalProperties": false,
        "required-settings": ["voting_threshold", "days_limit", "threshold_reached_message", "eligibility_criteria","success_stories"],
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true},
          "voting_threshold": {
            "description": "The number of votes an initiative needs to reach to be accepted",
            "type": "integer",
            "minimum": 2,
            "default": 300
          },
          "days_limit": {
            "description": "Number of days a proposed initiative has to reach its voting_threshold",
            "type": "integer",
            "minimum": 1,
            "default": 90
          },
          "threshold_reached_message": {
            "description": "Message shown to users when an initiative reached the threshold. Supports HTML paragraphs and breaks",
            "$ref": "#/definitions/multiloc_string",
            "default": <%= MultilocService.new.i18n_to_multiloc(
              'initiatives.default_threshold_reached_message',
              locales: CL2_SUPPORTED_LOCALES).to_json
            %>
          },
          "eligibility_criteria": {
            "description": "Criteria to which an initiative should comply, shown to users when posting. Supports HTML paragraphs and breaks",
            "$ref": "#/definitions/multiloc_string",
            "default": <%= MultilocService.new.i18n_to_multiloc(
              'initiatives.default_eligibility_criteria',
              locales: CL2_SUPPORTED_LOCALES).to_json
            %>
          },
          "success_stories": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": ["page_slug", "location", "image_url"],
              "properties": {
                "page_slug": {"type": "string"},
                "location": {"type": "string"},
                "image_url": {"type": "string", "format": "uri"}
              }
            }
          }
        }
      },
      "polls": {
        "type": "object",
        "description": "Participation methods that allows citizens to answer multiple questions with predefined answers",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "fragments": {
        "type": "object",
        "description":  "Internal system to allow specific pieces of UI to be overriden with custom HTML for this tenant only",
        "additionalProperties": false,
        "required": ["allowed", "enabled", "enabled_fragments"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "enabled_fragments": {
            "type": "array",
            "default": [],
            "description": "List of fragment names that should be enabled. (e.g. `signed-out-header`)",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "verification": {
        "type": "object",
        "description": "Let's users prove that they are real citizens, in order to unlock some actions",
        "additionalProperties": false,
        "required": ["allowed", "enabled","verification_methods"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false},
          "verification_methods": {
            "private": true,
            "type": "array",
            "default": [],
            "items": {
              "anyOf":
                <%= Verification::VerificationService.new.all_methods.map do |method|
                    {
                      type: "object",
                      title: method.name,
                      required: ["name", *method.config_parameters],
                      properties: {
                        name: {type: "string", enum: [method.name], default: method.name, readOnly: true},
                        **method.config_parameters.map do |cp|
                          parameter_schema = method.respond_to?(:config_parameters_schema) && method.config_parameters_schema[cp]
                          [cp, parameter_schema || {type: "string", private: "true"}]
                        end.to_h
                      }
                    }
                  end.to_json
                %>
            }
          }
        }
      },
      "moderation": {
        "type": "object",
        "description": "Moderations are pieces of user-generated content that need to be moderated",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      },
      "project_folders": {
        "type": "object",
        "description": "Project folders are used to group projects together",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false}
        }
      },
      "disable_downvoting": {
        "type": "object",
        "description": "Restrict chosen participation contexts to hide and forbid downvoting",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": false},
          "enabled": { "type": "boolean", "default": false}
        }
      },
      "volunteering": {
        "type": "object",
        "description": "Participation method to let citizens volunteer",
        "additionalProperties": false,
        "required": ["allowed", "enabled"],
        "properties": {
          "allowed": { "type": "boolean", "default": true},
          "enabled": { "type": "boolean", "default": true}
        }
      }
    },
  "dependencies": {
    "projects_info": ["projects"],
    "projects_pages": ["projects"],
    "projects_events": ["projects"],
    "projects_phases": ["projects"],
    "private_projects": ["groups"],
    "typeform_surveys": ["surveys"],
    "google_forms_surveys": ["surveys"],
    "surveymonkey_surveys": ["surveys"]
  },
  "definitions": {
    "multiloc_string": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        <%= CL2_SUPPORTED_LOCALES.map{|l| "\"#{l.to_s}\": {\"type\": \"string\"}"}.join(",") %>
      }
    }
  }
}
